lapply(wfmu.spark.ath, function(x){
return(x)
})
}))
data.frame(lapply(wfmu.spark.ath, function(x){
return(x)
}))
wfmu.spark.ath
matrix(unlist(wfmu.spark.ath))
matrix(unlist(wfmu.spark.ath), nrow = 8)
matrix(unlist(wfmu.spark.ath), nrow = 8, byrow = T)
matrix(unlist(wfmu.spark.ath), nrow = 8, byrow = F)
matrix(unlist(wfmu.spark.ath), nrow = 8, byrow = T)
matrix(unlist(wfmu.spark.ath), nrow = 8)
matrix(unlist(wfmu.spark.ath), nrow = 8, byrow = T)
matrix(unlist(wfmu.spark.ath), nrow = 8)
matrix(unlist(wfmu.spark.ath), nrow = 8)
matrix(unlist(wfmu.spark.ath), ncol = 8)
matrix(unlist(wfmu.spark.ath), ncol = 8, byrow=T)
data.frame(matrix(unlist(wfmu.spark.ath), ncol = 8, byrow=T), quote=F, stringsAsFactors = F)
wfmu <- data.frame(matrix(unlist(wfmu.spark.ath), ncol = 8, byrow=T), quote=F, stringsAsFactors = F)
wfmu <- data.frame(matrix(unlist(wfmu.spark.ath), ncol = 8, byrow=T), stringsAsFactors = F)
head(wfmu)
wfmu <- data.frame(matrix(unlist(wfmu.spark.ath), ncol = 8, byrow=T), stringsAsFactors = F)[,c(1,2,6,8)]
names(wfmu) <- c("yr","mnth","channel","duration")
head(wfmu)
library(dplyr)
group_by(wfmu, yr,mnth,channel) %>% summarise(ath.sum=sum(duration))
group_by(wfmu, yr,mnth,channel) %>% summarise(ath.sum=sum(as.integer(duration)))
group_by(wfmu, yr,mnth,channel) %>% summarise(ath.sum=sum(as.integer(duration))) %>% data.frame()
wfmu.sum <- group_by(wfmu, yr,mnth,channel) %>% summarise(ath.sum=sum(as.integer(duration))) %>% data.frame()
wfmu <- group_by(wfmu, yr,mnth,channel) %>% summarise(ath.sum=sum(as.integer(duration))) %>% data.frame()
head(wfmu)
unique(wfmu$channel)
filter(wfmu, channel == 'freeform-128k')
shiny::runApp('shiny')
shiny::runApp('shiny')
filter(wfmu, grepl('freeform-128k', channel))
filter(wfmu, grepl('freeform-128k', channel))$channel
select(filter(wfmu, grepl('freeform-128k', channel)),channel,sum.ath)
select(filter(wfmu, grepl('freeform-128k', channel)),channel,ath.sum)
select(filter(wfmu, grepl('freeform-128k', channel) & ath.sum > 0),channel,ath.sum)
filter(wfmu, channel=='freeform-128k')
sum(filter(wfmu, channel=='freeform-128k')$ath.sum)
sum(as.numeric(filter(wfmu, channel=='freeform-128k')$ath.sum))
shiny::runApp('shiny')
aggr <- read.csv('aggregate.tsv', sep='\t', stringsAsFactors = F, header=F)
setwd('shiny')
aggr <- read.csv('aggregate.tsv', sep='\t', stringsAsFactors = F, header=F)
names(aggr) <- c('server', 'mnth', 'yr', 'channel', 'sum.ath', 'count.ath')
aggr <- filter(aggr, !(is.na(yr)) & !grepl('.xsl', channel) &
!grepl('.aac', channel) & !grepl('admin/', channel) &
!grepl('.png', channel) & !grepl('.jpg', channel) &
!grepl('.css', channel))
filter(aggr, channel == 'freeform-128k')
group_by(aggr, yr,mnth, channel, sum.ath) %>% summarise(ath.sum = sum(sum.ath))
aggr <- group_by(aggr, yr,mnth, channel, sum.ath) %>% summarise(ath.sum = sum(sum.ath)) %>% data.frame()
filter(aggr, channel == 'freeform-128k')
aggr <- group_by(aggr, yr,mnth, channel) %>% summarise(ath.sum = sum(sum.ath)) %>% data.frame()
filter(aggr, channel == 'freeform-128k')
setwd('..')
wfmu.spark.ath <- sapply(readLines('spark-results/part-00000'), function(x) {
return(strsplit(gsub('(\\[|\\])', '', x), split=','))
})
wfmu.spark.ath <- wfmu.spark.ath[lengths(wfmu.spark.ath, use.names = F) ==8]
matrix(wfmu.spark.ath)
data.frame(lapply(wfmu.spark.ath, function(x){
return(x)
}))
wfmu <- data.frame(matrix(unlist(wfmu.spark.ath), ncol = 8, byrow=T), stringsAsFactors = F)[,c(1,2,6,8)]
names(wfmu) <- c("yr","mnth","channel","duration")
wfmu
names(wfmu) <- c("yr","mnth","channel","duration")
wfmu <- group_by(wfmu, yr,mnth,channel) %>% summarise(ath.sum=sum(as.integer(duration))) %>% data.frame()
select(filter(wfmu, grepl('freeform-128k', channel) & ath.sum > 0),channel,ath.sum)
wfmu.hive.ath <- read.csv("hive-results/000000_0", sep='\t')
wfmu.hive.ath
wfmu.hive.ath <- read.csv("hive-results/000000_0", sep='\t', header = F, stringsAsFactors = F)
names(wfmu.hive.ath) <- c('mnth','yr','channel', 'duration', 'cnt')
wfmu.hive.ath
wfmu.spark.ath <- sapply(readLines('spark-results/part-00000'), function(x) {
return(strsplit(gsub('(\\[|\\])', '', x), split=','))
})
wfmu.spark.ath <- wfmu.spark.ath[lengths(wfmu.spark.ath, use.names = F) ==8]
wfmu.spark.ath <- data.frame(matrix(unlist(wfmu.spark.ath), ncol = 8, byrow=T), stringsAsFactors = F)[,c(1,2,6,8)]
names(wfmu) <- c("yr","mnth","channel","duration")
wfmu.spark.ath <- group_by(wfmu, yr,mnth,channel) %>% summarise(ath.sum=sum(as.integer(duration))) %>% data.frame()
select(filter(wfmu, grepl('freeform-128k', channel) & ath.sum > 0),channel,ath.sum)
#sum(as.numeric(filter(wfmu, channel=='freeform-128k')$ath.sum))
wfmu.hive.ath <- read.csv("hive-results/000000_0", sep='\t', header = F, stringsAsFactors = F)
names(wfmu.hive.ath) <- c('mnth','yr','channel', 'duration', 'cnt')
unique(wfmu.spark.ath) %in% unique(wfmu.hive.ath)
wfmu.spark.ath <- sapply(readLines('spark-results/part-00000'), function(x) {
return(strsplit(gsub('(\\[|\\])', '', x), split=','))
})
wfmu.spark.ath <- wfmu.spark.ath[lengths(wfmu.spark.ath, use.names = F) ==8]
wfmu.spark.ath <- data.frame(matrix(unlist(wfmu.spark.ath), ncol = 8, byrow=T), stringsAsFactors = F)[,c(1,2,6,8)]
names(wfmu.spark.ath) <- c("yr","mnth","channel","duration")
wfmu.spark.ath <- group_by(wfmu, yr,mnth,channel) %>% summarise(ath.sum=sum(as.integer(duration))) %>% data.frame()
wfmu.spark.ath <- group_by(wfmu, yr,mnth,channel) %>% summarise(ath.sum=sum(as.integer(duration))) %>% data.frame()
l
wfmu.spark.ath <- sapply(readLines('spark-results/part-00000'), function(x) {
return(strsplit(gsub('(\\[|\\])', '', x), split=','))
})
wfmu.spark.ath <- wfmu.spark.ath[lengths(wfmu.spark.ath, use.names = F) ==8]
wfmu.spark.ath <- data.frame(matrix(unlist(wfmu.spark.ath), ncol = 8, byrow=T), stringsAsFactors = F)[,c(1,2,6,8)]
names(wfmu.spark.ath) <- c("yr","mnth","channel","duration")
wfmu.spark.ath <- group_by(wfmu.spark.ath, yr,mnth,channel) %>% summarise(ath.sum=sum(as.integer(duration))) %>% data.frame()
select(filter(wfmu.spark.ath, grepl('freeform-128k', channel) & ath.sum > 0),channel,ath.sum)
#sum(as.numeric(filter(wfmu.spark.ath, channel=='freeform-128k')$ath.sum))
wfmu.hive.ath <- read.csv("hive-results/000000_0", sep='\t', header = F, stringsAsFactors = F)
names(wfmu.hive.ath) <- c('mnth','yr','channel', 'duration', 'cnt')
unique(wfmu.spark.ath$channel) %in% unique(wfmu.hive.ath$channel)
unique(wfmu.spark.ath$channel) !%in% unique(wfmu.hive.ath$channel)
!unique(wfmu.spark.ath$channel) %in% unique(wfmu.hive.ath$channel)
spark.channels <- wfmu.spark.ath[!unique(wfmu.spark.ath$channel) %in% unique(wfmu.hive.ath$channel), ]
head(spark.channels)
arrange(spark.channels, desc(ath.sum))
head(arrange(spark.channels, desc(ath.sum)), n=10)
spark.channels <- filter(wfmu.hive.ath, channel %in%
unique(wfmu.spark.ath$channel)[!unique(wfmu.spark.ath$channel) %in% unique(wfmu.hive.ath$channel)])
unique(wfmu.spark.ath$channel)[!unique(wfmu.spark.ath$channel) %in% unique(wfmu.hive.ath$channel)]
spark.channels <- filter(wfmu.spark.ath, channel %in%
unique(wfmu.spark.ath$channel)[!unique(wfmu.spark.ath$channel) %in% unique(wfmu.hive.ath$channel)])
head(spark.channels, desc(ath.sum))
names(spark.channels)
head(arrange(spark.channels, desc(ath.sum)), n=10)
sum(as.numeric(filter(wfmu.spark.ath, channel=='freeform-128k')$ath.sum))
sum(as.numeric(filter(wfmu.hive.ath, channel=='freeform-128k')$ath.sum))
names(wfmu.hive.ath)
names(wfmu.hive.ath) <- c('mnth','yr','channel', 'ath.sum', 'cnt')
sum(as.numeric(filter(wfmu.spark.ath, channel=='freeform-128k')$ath.sum))
sum(as.numeric(filter(wfmu.hive.ath, channel=='freeform-128k')$ath.sum))
sum(as.numeric(wfmu.spark.ath$ath.sum))
sum(as.numeric(wfmu.hive.ath$ath.sum))
sum(as.numeric(wfmu.spark.ath$ath.sum)) -
sum(as.numeric(wfmu.hive.ath$ath.sum))
abs(sum(as.numeric(wfmu.spark.ath$ath.sum)) -
sum(as.numeric(wfmu.hive.ath$ath.sum)))
wfmu.spark.ath <- sapply(readLines('spark-results/part-00000'), function(x) {
return(strsplit(gsub('(\\[|\\])', '', x), split=','))
})
wfmu.spark.ath <- wfmu.spark.ath[lengths(wfmu.spark.ath, use.names = F) ==8]
wfmu.spark.ath <- data.frame(matrix(unlist(wfmu.spark.ath), ncol = 8, byrow=T), stringsAsFactors = F)[,c(1,2,6,8)]
names(wfmu.spark.ath) <- c("yr","mnth","channel","duration")
wfmu.spark.ath
readLines('spark-results/part-00000')
wfmu.spark.ath <- sapply(readLines('spark-results/part-00000'), function(x) {
return(strsplit(gsub('(\\[|\\])', '', x), split=','))
})
wfmu.spark.ath <- wfmu.spark.ath[lengths(wfmu.spark.ath, use.names = F) ==5]
wfmu.spark.ath <- data.frame(matrix(unlist(wfmu.spark.ath), ncol = 5, byrow=T), stringsAsFactors = F)[,c(1,2,6,8)]
wfmu.spark.ath
wfmu.spark.ath <- data.frame(matrix(unlist(wfmu.spark.ath), ncol = 5, byrow=T), stringsAsFactors = F)
names(wfmu.spark.ath) <- c("yr","mnth","channel","duration", "cnt")
wfmu.spark.ath <- group_by(wfmu.spark.ath, yr,mnth,channel) %>% summarise(ath.sum=sum(as.integer(duration))) %>% data.frame()
select(filter(wfmu.spark.ath, grepl('freeform-128k', channel) & ath.sum > 0),channel,ath.sum)
abs(sum(as.numeric(wfmu.spark.ath$ath.sum)) -
sum(as.numeric(wfmu.hive.ath$ath.sum)))
sum(as.numeric(filter(wfmu.spark.ath, channel=='freeform-128k')$ath.sum))
sum(as.numeric(filter(wfmu.hive.ath, channel=='freeform-128k')$ath.sum))
wfmu.spark.ath <- sapply(readLines('spark-results-full/part-00000'), function(x) {
return(strsplit(gsub('(\\[|\\])', '', x), split=','))
})
wfmu.spark.ath <- wfmu.spark.ath[lengths(wfmu.spark.ath, use.names = F) ==5]
wfmu.spark.ath
wfmu.spark.ath <- sapply(readLines('spark-results-full/part-00000'), function(x) {
return(strsplit(gsub('(\\[|\\])', '', x), split=','))
})
wfmu.spark.ath <- wfmu.spark.ath[lengths(wfmu.spark.ath, use.names = F) !=5]
wfmu.spark.ath <- sapply(readLines('spark-results-full/part-00000'), function(x) {
return(strsplit(gsub('(\\[|\\])', '', x), split=','))
})
wfmu.spark.ath <- wfmu.spark.ath[lengths(wfmu.spark.ath, use.names = F) ==5]
wfmu.hive.ath <- read.csv("hive-results/000000_0", sep='\t', header = F, stringsAsFactors = F)
names(wfmu.hive.ath) <- c('mnth','yr','channel', 'ath.sum', 'cnt')
wfmu.hive.ath <- read.csv("hive-results/000000_0", sep='\t', header = F, stringsAsFactors = F)
names(wfmu.hive.ath) <- c('mnth','yr','channel', 'ath.sum', 'cnt')
wfmu.spark.ath <- sapply(readLines('spark-results-full/part-00000'), function(x) {
return(strsplit(gsub('(\\[|\\])', '', x), split=','))
})
wfmu.spark.ath <- wfmu.spark.ath[lengths(wfmu.spark.ath, use.names = F) ==5]
wfmu.hive.ath <- read.csv("hive-results/000000_0", sep='\t', header = F, stringsAsFactors = F)
names(wfmu.hive.ath) <- c('mnth','yr','channel', 'ath.sum', 'cnt')
wfmu.spark.ath <- sapply(readLines('spark-results/part-00000'), function(x) {
return(strsplit(gsub('(\\[|\\])', '', x), split=','))
})
wfmu.spark.ath <- wfmu.spark.ath[lengths(wfmu.spark.ath, use.names = F) ==5]
wfmu.spark.ath <- data.frame(matrix(unlist(wfmu.spark.ath), ncol = 5, byrow=T), stringsAsFactors = F)
names(wfmu.spark.ath) <- c("yr","mnth","channel","duration", "cnt")
wfmu.spark.ath <- group_by(wfmu.spark.ath, yr,mnth,channel) %>% summarise(ath.sum=sum(as.integer(duration))) %>% data.frame()
select(filter(wfmu.spark.ath, grepl('freeform-128k', channel) & ath.sum > 0),channel,ath.sum)
sum(as.numeric(filter(wfmu.spark.ath, channel=='freeform-128k')$ath.sum))
sum(as.numeric(filter(wfmu.hive.ath, channel=='freeform-128k')$ath.sum))
abs(sum(as.numeric(wfmu.spark.ath$ath.sum)) -
sum(as.numeric(wfmu.hive.ath$ath.sum)))
wfmu.hive.ath <- read.csv("hive-results/000000_0", sep='\t', header = F, stringsAsFactors = F)
names(wfmu.hive.ath) <- c('mnth','yr','channel', 'ath.sum', 'cnt')
spark.channels <- filter(wfmu.spark.ath, channel %in%
unique(wfmu.spark.ath$channel)[!unique(wfmu.spark.ath$channel) %in% unique(wfmu.hive.ath$channel)])
head(arrange(spark.channels, desc(ath.sum)), n=10)
sum(as.numeric(wfmu.spark.ath$ath.sum)) -
sum(as.numeric(wfmu.hive.ath$ath.sum))
wfmu.hive.ath <- read.csv("hive-results/000000_0", sep='\t', header = F, stringsAsFactors = F)
names(wfmu.hive.ath) <- c('mnth','yr','channel', 'ath.sum', 'cnt')
spark.channels <- filter(wfmu.spark.ath, channel %in%
unique(wfmu.spark.ath$channel)[!unique(wfmu.spark.ath$channel) %in% unique(wfmu.hive.ath$channel)])
head(arrange(spark.channels, desc(ath.sum)), n=10)
wfmu.hive.ath <- read.csv("hive-results/000000_0", sep='\t', header = F, stringsAsFactors = F)
names(wfmu.hive.ath) <- c('mnth','yr','channel', 'ath.sum', 'cnt')
sum(as.numeric(filter(wfmu.spark.ath, channel=='freeform-128k')$ath.sum))
sum(as.numeric(filter(wfmu.hive.ath, channel=='freeform-128k')$ath.sum))
sum(as.numeric(wfmu.spark.ath$ath.sum)) -
sum(as.numeric(wfmu.hive.ath$ath.sum))
wfmu.hive.ath <- read.csv("hive-results/000000_0", sep='\t', header = F, stringsAsFactors = F)
names(wfmu.hive.ath) <- c('mnth','yr','channel', 'ath.sum', 'cnt')
sum(as.numeric(filter(wfmu.spark.ath, channel=='freeform-128k')$ath.sum))
sum(as.numeric(filter(wfmu.hive.ath, channel=='freeform-128k')$ath.sum))
sum(as.numeric(wfmu.spark.ath$ath.sum)) -
sum(as.numeric(wfmu.hive.ath$ath.sum))
unique(wfmu.spark.ath$channel)[!unique(wfmu.spark.ath$channel) %in% unique(wfmu.hive.ath$channel)])
unique(wfmu.spark.ath$channel)[!unique(wfmu.spark.ath$channel) %in% unique(wfmu.hive.ath$channel)]
spark.channels <- filter(wfmu.spark.ath, channel %in%
unique(wfmu.spark.ath$channel)[!unique(wfmu.spark.ath$channel) %in% unique(wfmu.hive.ath$channel)])
head(arrange(spark.channels, desc(ath.sum)), n=10)
wfmu.spark.ath <- sapply(readLines('spark-results/part-00000'), function(x) {
return(strsplit(gsub('(\\[|\\])', '', x), split=','))
})
wfmu.spark.ath <- wfmu.spark.ath[lengths(wfmu.spark.ath, use.names = F) ==5]
wfmu.spark.ath <- data.frame(matrix(unlist(wfmu.spark.ath), ncol = 5, byrow=T), stringsAsFactors = F)
names(wfmu.spark.ath) <- c("yr","mnth","channel","duration", "cnt")
wfmu.spark.ath <- group_by(wfmu.spark.ath, yr,mnth,channel) %>% summarise(ath.sum=sum(as.integer(duration))) %>% data.frame()
select(filter(wfmu.spark.ath, grepl('freeform-128k', channel) & ath.sum > 0),channel,ath.sum)
wfmu.hive.ath <- read.csv("hive-results/000000_0", sep='\t', header = F, stringsAsFactors = F)
names(wfmu.hive.ath) <- c('mnth','yr','channel', 'ath.sum', 'cnt')
sum(as.numeric(filter(wfmu.spark.ath, channel=='freeform-128k')$ath.sum))
sum(as.numeric(filter(wfmu.hive.ath, channel=='freeform-128k')$ath.sum))
sum(as.numeric(wfmu.spark.ath$ath.sum)) -
sum(as.numeric(wfmu.hive.ath$ath.sum))
wfmu.spark.ath <- sapply(readLines('spark-results/part-00000'), function(x) {
return(strsplit(gsub('(\\[|\\])', '', x), split=','))
})
wfmu.spark.ath <- wfmu.spark.ath[lengths(wfmu.spark.ath, use.names = F) ==5]
wfmu.spark.ath <- data.frame(matrix(unlist(wfmu.spark.ath), ncol = 5, byrow=T), stringsAsFactors = F)
names(wfmu.spark.ath) <- c("yr","mnth","channel","duration", "cnt")
wfmu.spark.ath <- group_by(wfmu.spark.ath, yr,mnth,channel) %>% summarise(ath.sum=sum(as.integer(duration))) %>% data.frame()
select(filter(wfmu.spark.ath, grepl('freeform-128k', channel) & ath.sum > 0),channel,ath.sum)
wfmu.hive.ath <- read.csv("hive-results/000000_0", sep='\t', header = F, stringsAsFactors = F)
names(wfmu.hive.ath) <- c('mnth','yr','channel', 'ath.sum', 'cnt')
sum(as.numeric(filter(wfmu.spark.ath, channel=='freeform-128k')$ath.sum))
sum(as.numeric(filter(wfmu.hive.ath, channel=='freeform-128k')$ath.sum))
sum(as.numeric(wfmu.spark.ath$ath.sum)) -
sum(as.numeric(wfmu.hive.ath$ath.sum))
spark.channels <- filter(wfmu.spark.ath, channel %in%
unique(wfmu.spark.ath$channel)[!unique(wfmu.spark.ath$channel) %in% unique(wfmu.hive.ath$channel)])
head(arrange(spark.channels, desc(ath.sum)), n=10)
sum(as.numeric(filter(wfmu.spark.ath, channel=='freeform-128k')$ath.sum))
sum(as.numeric(filter(wfmu.hive.ath, channel=='freeform-128k')$ath.sum))
group_by(wwfmu.hive.ath, yr, mnth, channel) %>% summarise(sum.ath = sum(ath.sum)) %>% filter(channel =='freeform-128k')
library(dplyr)
group_by(wfmu.hive.ath, yr, mnth, channel) %>% summarise(sum.ath = sum(ath.sum)) %>% filter(channel =='freeform-128k')
group_by(wfmu.spark.ath, yr, mnth, channel) %>% summarise(sum.ath = sum(ath.sum)) %>% filter(channel =='freeform-128k')
wfmu.spark.ath <- sapply(readLines('spark-results-distinct.txt'), function(x) {
return(strsplit(gsub('(\\[|\\])', '', x), split=','))
})
wfmu.spark.ath
wfmu.spark.ath <- wfmu.spark.ath[lengths(wfmu.spark.ath, use.names = F) ==5]
wfmu.spark.ath <- data.frame(matrix(unlist(wfmu.spark.ath), ncol = 5, byrow=T), stringsAsFactors = F)
head(wfmu.spark.ath)
names(wfmu.spark.ath) <- c("yr","mnth","channel","duration", "cnt")
filter(wfmu.spark.ath, channel == 'freeform-128k')
shiny::runApp('shiny')
library(RPostgreSQL)
sql <- """
select      *
from        purple.jurisdiction_year jy
left join   purple.are_completion ac on ac.\"Exam  Year\"= jy.year and ac.\"state code\" = jy.\"state code\"
left join   purple.idp_completion ic on ic.\"experience year\" = jy.year and ic.\"state code\" = jy.\"state code\"
left join   purple.licensure_totals lt on lt.year = jy.year and lt.\"state code\" = jy.\"state code\"
where       jy.year in (2014,2015)
and       lt.year is not null
order by jy.\"state code\"
;
"""
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host="miley.cda5nmppsk8w.us-east-1.redshift.amazonaws.com",
port="5439", dbname="ncarbdw", user="admin")
full <- dbGetQuery(con,sql)
dbDisconnect(con)
rm(con,drv,sql)
library(RPostgreSQL)
sql <- """
select      *
from        purple.jurisdiction_year jy
left join   purple.are_completion ac on ac.\"Exam  Year\"= jy.year and ac.\"state code\" = jy.\"state code\"
left join   purple.idp_completion ic on ic.\"experience year\" = jy.year and ic.\"state code\" = jy.\"state code\"
left join   purple.licensure_totals lt on lt.year = jy.year and lt.\"state code\" = jy.\"state code\"
where       jy.year in (2014,2015)
and       lt.year is not null
order by jy.\"state code\"
;
"""
library(RPostgreSQL)
sql <- """
select      *
from        purple.jurisdiction_year jy
left join   purple.are_completion ac on ac.\"Exam  Year\"= jy.year and ac.\"state code\" = jy.\"state code\"
left join   purple.idp_completion ic on ic.\"experience year\" = jy.year and ic.\"state code\" = jy.\"state code\"
left join   purple.licensure_totals lt on lt.year = jy.year and lt.\"state code\" = jy.\"state code\"
where       jy.year in (2014,2015)
and       lt.year is not null
order by jy.\"state code\";
"""
library(RPostgreSQL)
sql <- "
select      *
from        purple.jurisdiction_year jy
left join   purple.are_completion ac on ac.\"Exam  Year\"= jy.year and ac.\"state code\" = jy.\"state code\"
left join   purple.idp_completion ic on ic.\"experience year\" = jy.year and ic.\"state code\" = jy.\"state code\"
left join   purple.licensure_totals lt on lt.year = jy.year and lt.\"state code\" = jy.\"state code\"
where       jy.year in (2014,2015)
and       lt.year is not null
order by jy.\"state code\";
"
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host="miley.cda5nmppsk8w.us-east-1.redshift.amazonaws.com",
port="5439", dbname="ncarbdw", user="admin")
j.totals <- dbGetQuery(con,sql)
dbDisconnect(con)
rm(con,drv,sql)
library(dplyr)
names(j.totals)
2014.totals <- filter(j.totals, year == 2014)
2014.totals <- filter(j.totals, `experience year` == 2014)
head(j.totals)
2014.totals <- filter(j.totals, year == 2014)
j.totals
totals.2014 <- filter(j.totals, year == 2014)
totals.2014 <- filter(j.totals, `experience year` == 2014)
names(j.totals)
library(RPostgreSQL)
library(dplyr)
sql <- "
select      jy.year, jy.state, ac.\"eligible testers\", ac.\"exams taken\", ac.\"national exams taken\", ac.\"exams passed\", ac.\"national exams passed\", ac.\"are completions\", ac.\"median are duration\", ac.\"national median are duration\",
ic.\"interns reporting hours\", ic.\"national interns reporting hours\", ic.\"idp completions\", \"median idp duration\", ic.\"national idp completions\", ic.\"national median idp duration\", lt.\"resident licenses\",
lt.\"reciprocal licenses\", lt.\"national resident licenses\", lt.\"national reciprocal licenses\"
from        purple.jurisdiction_year jy
left join   purple.are_completion ac on ac.\"Exam  Year\"= jy.year and ac.\"state code\" = jy.\"state code\"
left join   purple.idp_completion ic on ic.\"experience year\" = jy.year and ic.\"state code\" = jy.\"state code\"
left join   purple.licensure_totals lt on lt.year = jy.year and lt.\"state code\" = jy.\"state code\"
where       jy.year in (2014,2015)
and       lt.year is not null
order by jy.\"state code\"
;
"
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host="miley.cda5nmppsk8w.us-east-1.redshift.amazonaws.com",
port="5439", dbname="ncarbdw", user="admin")
j.totals <- dbGetQuery(con,sql)
dbDisconnect(con)
rm(con,drv,sql)
totals.2014 <- filter(j.totals, `experience year` == 2014)
totals.2014 <- filter(j.totals, year == 2014)
totals.2015 <- filter(j.totals, year == 2015)
rm(j.totals)
names(totals.2014)
filter(totals.2014, state=='Arizona')
filter(totals.2015, state=='Arizona')
con <- dbConnect(drv, host="nbtn2016.cda5nmppsk8w.us-east-1.redshift.amazonaws.com",
port="5439", dbname="ncarbdw", user="admin")
library(RPostgreSQL)
library(dplyr)
sql <- "
select      jy.year, jy.state, ac.\"eligible testers\", ac.\"exams taken\", ac.\"national exams taken\", ac.\"exams passed\", ac.\"national exams passed\", ac.\"are completions\", ac.\"median are duration\", ac.\"national median are duration\",
ic.\"interns reporting hours\", ic.\"national interns reporting hours\", ic.\"idp completions\", \"median idp duration\", ic.\"national idp completions\", ic.\"national median idp duration\", lt.\"resident licenses\",
lt.\"reciprocal licenses\", lt.\"national resident licenses\", lt.\"national reciprocal licenses\"
from        purple.jurisdiction_year jy
left join   purple.are_completion ac on ac.\"Exam  Year\"= jy.year and ac.\"state code\" = jy.\"state code\"
left join   purple.idp_completion ic on ic.\"experience year\" = jy.year and ic.\"state code\" = jy.\"state code\"
left join   purple.licensure_totals lt on lt.year = jy.year and lt.\"state code\" = jy.\"state code\"
where       jy.year in (2014,2015)
and       lt.year is not null
order by jy.\"state code\"
;
"
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host="nbtn2016.cda5nmppsk8w.us-east-1.redshift.amazonaws.com",
port="5439", dbname="ncarbdw", user="admin")
j.totals <- dbGetQuery(con,sql)
dbDisconnect(con)
rm(con,drv,sql)
totals.2015 <- filter(j.totals, year == 2015)
filter(totals.2015, state=='Arizona')
library(RPostgreSQL)
library(dplyr)
sql <- "
select      jy.year, jy.state, ac.\"eligible testers\", ac.\"exams taken\", ac.\"national exams taken\", ac.\"exams passed\", ac.\"national exams passed\", ac.\"are completions\", ac.\"median are duration\", ac.\"national median are duration\",
ic.\"interns reporting hours\", ic.\"national interns reporting hours\", ic.\"idp completions\", \"median idp duration\", ic.\"national idp completions\", ic.\"national median idp duration\", lt.\"resident licenses\",
lt.\"reciprocal licenses\", lt.\"national resident licenses\", lt.\"national reciprocal licenses\"
from        purple.jurisdiction_year jy
left join   purple.are_completion ac on ac.\"Exam  Year\"= jy.year and ac.\"state code\" = jy.\"state code\"
left join   purple.idp_completion ic on ic.\"experience year\" = jy.year and ic.\"state code\" = jy.\"state code\"
left join   purple.licensure_totals lt on lt.year = jy.year and lt.\"state code\" = jy.\"state code\"
where       1=1 --jy.year in (2014,2015)
and       lt.year is not null
order by jy.\"state code\"
;
"
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host="nbtn2016.cda5nmppsk8w.us-east-1.redshift.amazonaws.com",
port="5439", dbname="ncarbdw", user="admin")
j.totals <- dbGetQuery(con,sql)
dbDisconnect(con)
rm(con,drv,sql)
totals.2014 <- filter(j.totals, year == 2014)
totals.2015 <- filter(j.totals, year == 2015)
filter(totals.2014, state=='Arizona')
filter(totals.2014, state=='California')
totals.2014 + totals.2015
select(totals.2014, -state, -year) + select(totals.2015, -state,-year)
(select(totals.2014, -state, -year) + select(totals.2015, -state,-year))/select(totals.2015, -state,-year)
pct.diff <- (select(totals.2014, -state, -year) + select(totals.2015, -state,-year))/select(totals.2015, -state,-year)
squ<- paste('pct_diff_', names(pct.diff), sep='')
squ
names(pct.diff) <- paste('pct_diff_', names(pct.diff), sep='')
full <- cbind(totals.2015, pct.diff)
head(full)
totals.2014 <- filter(j.totals, year == 2014) %>% arrange(state)
totals.2015 <- filter(j.totals, year == 2015) %>% arrange(state)
pct.diff <- (select(totals.2014, -state, -year) + select(totals.2015, -state,-year))/select(totals.2015, -state,-year)
names(pct.diff) <- paste('pct_diff_', names(pct.diff), sep='')
full <- cbind(totals.2015, pct.diff)
head(full)
totals.2015$state == totals.2014$state
setwd('../TheDatanomicon/Stories/4640_JurisdictionalReports')
write.csv('nbnt2016.with.pct.diffs.tsv', sep='\t', row.names = F)
write.table('nbnt2016.with.pct.diffs.tsv', sep='\t', row.names = F)
write.table(full, 'nbnt2016.with.pct.diffs.tsv', sep='\t', row.names = F)
write.table(full, 'nbtn2016.juris.with.pct.diff.csv', sep=',', row.names = F)
filter(totals.2014, state=='Delaware')
totals.2014 <- filter(j.totals, year == 2014) %>% arrange(state)
totals.2015 <- filter(j.totals, year == 2015) %>% arrange(state)
pct.diff <- (select(totals.2015, -state, -year) - select(totals.2014, -state,-year))/select(totals.2015, -state,-year)
names(pct.diff) <- paste('pct_diff_', names(pct.diff), sep='')
full <- cbind(totals.2015, pct.diff)
filter(full, state=='Arizona')
write.table(full, 'nbtn2016.juris.with.pct.diff.csv', sep=',', row.names = F)
pct.diff <- (select(totals.2015, -state, -year) - select(totals.2014, -state,-year))/select(totals.2014, -state,-year)
names(pct.diff) <- paste('pct_diff_', names(pct.diff), sep='')
full <- cbind(totals.2015, pct.diff)
write.table(full, 'nbtn2016.juris.with.pct.diff.csv', sep=',', row.names = F)
pct.diff <- ((select(totals.2015, -state, -year) - select(totals.2014, -state,-year))/select(totals.2014, -state,-year))*100
names(pct.diff) <- paste('pct_diff_', names(pct.diff), sep='')
full <- cbind(totals.2015, pct.diff)
write.table(full, 'nbtn2016.juris.with.pct.diff.csv', sep=',', row.names = F)
filter(totals.2015, state=='Nevada')
filter(totals.2015, state=='Nevada')$`exams passed`
filter(totals.2014, state=='Nevada')$`exams passed`
88 * .64
88 + 56.32
setwd('../../../../ATH')
setwd('../../../ATH')
wfmu.spark.ath <- sapply(readLines('spark-results/part-00000'), function(x) {
return(strsplit(gsub('(\\[|\\])', '', x), split=','))
})
library(dplyr)
wfmu.spark.ath <- sapply(readLines('spark-results/part-00000'), function(x) {
return(strsplit(gsub('(\\[|\\])', '', x), split=','))
})
wfmu.spark.ath <- wfmu.spark.ath[lengths(wfmu.spark.ath, use.names = F) ==5]
wfmu.spark.ath <- data.frame(matrix(unlist(wfmu.spark.ath), ncol = 5, byrow=T), stringsAsFactors = F)
names(wfmu.spark.ath) <- c("yr","mnth","channel","duration", "cnt")
wfmu.spark.ath <- group_by(wfmu.spark.ath, yr,mnth,channel) %>% summarise(ath.sum=sum(as.integer(duration))) %>% data.frame()
select(filter(wfmu.spark.ath, grepl('freeform-128k', channel) & ath.sum > 0),channel,ath.sum)
group_by(wfmu.spark.ath, yr, mnth, channel) %>% summarise(sum.ath = sum(ath.sum)) %>% filter(channel =='freeform-128k')
setwd('shiny')
wfmu.spark.ath <- sapply(readLines('spark-results.txt'), function(x) {
return(strsplit(gsub('(\\[|\\])', '', x), split=','))
})
wfmu.spark.ath <- wfmu.spark.ath[lengths(wfmu.spark.ath, use.names = F) ==5]
wfmu.spark.ath <- data.frame(matrix(unlist(wfmu.spark.ath), ncol = 5, byrow=T), stringsAsFactors = F)
names(wfmu.spark.ath) <- c("yr","mnth","channel","duration", "cnt")
filter(wfmu.spark.ath, channel == 'freeform-128k')
shiny::runApp()
write.table(wfmu.spark.ath, 'spark.aggregate.tsv', sep='\t', row.names = F)
aggr <- read.csv('spark.aggregate.tsv', sep='\t', stringsAsFactors = F, header=F)
shiny::runApp()
aggr <- read.csv('spark.aggregate.tsv', sep='\t', stringsAsFactors = F, header=F)
names(aggr) <- c('mnth', 'yr', 'channel', 'sum.ath', 'count.ath')
aggr <- filter(aggr, !(is.na(yr)) & !grepl('.xsl', channel) &
!grepl('.aac', channel) & !grepl('admin/', channel) &
!grepl('.png', channel) & !grepl('.jpg', channel) &
!grepl('.css', channel))
choices <- unique(paste(aggr$yr, ' - ', aggr$mnth, sep=''))
choices <- sort(choices, decreasing=T)
shiny::runApp()
aggr
head(aggr)
aggr <- read.csv('spark.aggregate.tsv', sep='\t', stringsAsFactors = F, header=F)
aggr <- read.csv('spark.aggregate.tsv', sep='\t', stringsAsFactors = F, header=T)
names(aggr) <- c('yr', 'mnth', 'channel', 'sum.ath', 'count.ath')
aggr <- filter(aggr, !(is.na(yr)) & !grepl('.xsl', channel) &
!grepl('.aac', channel) & !grepl('admin/', channel) &
!grepl('.png', channel) & !grepl('.jpg', channel) &
!grepl('.css', channel))
choices <- unique(paste(aggr$yr, ' - ', aggr$mnth, sep=''))
choices <- sort(choices, decreasing=T)
head(aggr)
unique(aggr$channel)
shiny::runApp()
shiny::runApp()
shiny::runApp()
